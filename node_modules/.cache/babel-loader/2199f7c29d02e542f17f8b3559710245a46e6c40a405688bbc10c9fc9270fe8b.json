{"ast":null,"code":"var assert = require('assert');\nvar fs = require('fs');\nvar mime = require('mime');\nvar util = require('util');\nvar MAX_FILE_SIZE_BYTES = 15 * 1024 * 1024;\nvar MAX_FILE_CHUNK_BYTES = 5 * 1024 * 1024;\n\n/**\n * FileUploader class used to upload a file to twitter via the /media/upload (chunked) API.\n * Usage:\n *   var fu = new FileUploader({ file_path: '/foo/bar/baz.mp4' }, twit);\n *   fu.upload(function (err, bodyObj, resp) {\n *     console.log(err, bodyObj);\n *   })\n *\n * @param  {Object}         params  Object of the form { file_path: String }.\n * @param  {Twit(object)}   twit    Twit instance.\n */\nvar FileUploader = function (params, twit) {\n  assert(params);\n  assert(params.file_path, 'Must specify `file_path` to upload a file. Got: ' + params.file_path + '.');\n  var self = this;\n  self._file_path = params.file_path;\n  self._twit = twit;\n  self._isUploading = false;\n  self._isFileStreamEnded = false;\n  self._isSharedMedia = !!params.shared;\n};\n\n/**\n * Upload a file to Twitter via the /media/upload (chunked) API.\n *\n * @param  {Function} cb function (err, data, resp)\n */\nFileUploader.prototype.upload = function (cb) {\n  var self = this;\n\n  // Send INIT command with file info and get back a media_id_string we can use to APPEND chunks to it.\n  self._initMedia(function (err, bodyObj, resp) {\n    if (err) {\n      cb(err);\n      return;\n    } else {\n      var mediaTmpId = bodyObj.media_id_string;\n      var chunkNumber = 0;\n      var mediaFile = fs.createReadStream(self._file_path, {\n        highWatermark: MAX_FILE_CHUNK_BYTES\n      });\n      mediaFile.on('data', function (chunk) {\n        // Pause our file stream from emitting `data` events until the upload of this chunk completes.\n        // Any data that becomes available will remain in the internal buffer.\n        mediaFile.pause();\n        self._isUploading = true;\n        self._appendMedia(mediaTmpId, chunk.toString('base64'), chunkNumber, function (err, bodyObj, resp) {\n          self._isUploading = false;\n          if (err) {\n            cb(err);\n          } else {\n            if (self._isUploadComplete()) {\n              // We've hit the end of our stream; send FINALIZE command.\n              self._finalizeMedia(mediaTmpId, cb);\n            } else {\n              // Tell our file stream to start emitting `data` events again.\n              chunkNumber++;\n              mediaFile.resume();\n            }\n          }\n        });\n      });\n      mediaFile.on('end', function () {\n        // Mark our file streaming complete, and if done, send FINALIZE command.\n        self._isFileStreamEnded = true;\n        if (self._isUploadComplete()) {\n          self._finalizeMedia(mediaTmpId, cb);\n        }\n      });\n    }\n  });\n};\nFileUploader.prototype._isUploadComplete = function () {\n  return !this._isUploading && this._isFileStreamEnded;\n};\n\n/**\n * Send FINALIZE command for media object with id `media_id`.\n *\n * @param  {String}   media_id\n * @param  {Function} cb\n */\nFileUploader.prototype._finalizeMedia = function (media_id, cb) {\n  var self = this;\n  self._twit.post('media/upload', {\n    command: 'FINALIZE',\n    media_id: media_id\n  }, cb);\n};\n\n/**\n * Send APPEND command for media object with id `media_id`.\n * Append the chunk to the media object, then resume streaming our mediaFile.\n *\n * @param  {String}   media_id        media_id_string received from Twitter after sending INIT comand.\n * @param  {String}   chunk_part      Base64-encoded String chunk of the media file.\n * @param  {Number}   segment_index   Index of the segment.\n * @param  {Function} cb\n */\nFileUploader.prototype._appendMedia = function (media_id_string, chunk_part, segment_index, cb) {\n  var self = this;\n  self._twit.post('media/upload', {\n    command: 'APPEND',\n    media_id: media_id_string.toString(),\n    segment_index: segment_index,\n    media: chunk_part\n  }, cb);\n};\n\n/**\n * Send INIT command for our underlying media object.\n *\n * @param  {Function} cb\n */\nFileUploader.prototype._initMedia = function (cb) {\n  var self = this;\n  var mediaType = mime.lookup(self._file_path);\n  var mediaFileSizeBytes = fs.statSync(self._file_path).size;\n  var shared = self._isSharedMedia;\n  var media_category = 'tweet_image';\n  if (mediaType.toLowerCase().indexOf('gif') > -1) {\n    media_category = 'tweet_gif';\n  } else if (mediaType.toLowerCase().indexOf('video') > -1) {\n    media_category = 'tweet_video';\n  }\n\n  // Check the file size - it should not go over 15MB for video.\n  // See https://dev.twitter.com/rest/reference/post/media/upload-chunked\n  if (mediaFileSizeBytes < MAX_FILE_SIZE_BYTES) {\n    self._twit.post('media/upload', {\n      'command': 'INIT',\n      'media_type': mediaType,\n      'total_bytes': mediaFileSizeBytes,\n      'shared': shared,\n      'media_category': media_category\n    }, cb);\n  } else {\n    var errMsg = util.format('This file is too large. Max size is %dB. Got: %dB.', MAX_FILE_SIZE_BYTES, mediaFileSizeBytes);\n    cb(new Error(errMsg));\n  }\n};\nmodule.exports = FileUploader;","map":{"version":3,"names":["assert","require","fs","mime","util","MAX_FILE_SIZE_BYTES","MAX_FILE_CHUNK_BYTES","FileUploader","params","twit","file_path","self","_file_path","_twit","_isUploading","_isFileStreamEnded","_isSharedMedia","shared","prototype","upload","cb","_initMedia","err","bodyObj","resp","mediaTmpId","media_id_string","chunkNumber","mediaFile","createReadStream","highWatermark","on","chunk","pause","_appendMedia","toString","_isUploadComplete","_finalizeMedia","resume","media_id","post","command","chunk_part","segment_index","media","mediaType","lookup","mediaFileSizeBytes","statSync","size","media_category","toLowerCase","indexOf","errMsg","format","Error","module","exports"],"sources":["C:/Users/Sanity/Documents/GitHub/animalbrowsing/node_modules/twit/lib/file_uploader.js"],"sourcesContent":["var assert = require('assert');\nvar fs = require('fs');\nvar mime = require('mime');\nvar util = require('util');\n\nvar MAX_FILE_SIZE_BYTES = 15 * 1024 * 1024;\nvar MAX_FILE_CHUNK_BYTES = 5 * 1024 * 1024;\n\n/**\n * FileUploader class used to upload a file to twitter via the /media/upload (chunked) API.\n * Usage:\n *   var fu = new FileUploader({ file_path: '/foo/bar/baz.mp4' }, twit);\n *   fu.upload(function (err, bodyObj, resp) {\n *     console.log(err, bodyObj);\n *   })\n *\n * @param  {Object}         params  Object of the form { file_path: String }.\n * @param  {Twit(object)}   twit    Twit instance.\n */\nvar FileUploader = function (params, twit) {\n  assert(params)\n  assert(params.file_path, 'Must specify `file_path` to upload a file. Got: ' + params.file_path + '.')\n  var self = this;\n  self._file_path = params.file_path;\n  self._twit = twit;\n  self._isUploading = false;\n  self._isFileStreamEnded = false;\n  self._isSharedMedia = !!params.shared;\n}\n\n/**\n * Upload a file to Twitter via the /media/upload (chunked) API.\n *\n * @param  {Function} cb function (err, data, resp)\n */\nFileUploader.prototype.upload = function (cb) {\n  var self = this;\n\n  // Send INIT command with file info and get back a media_id_string we can use to APPEND chunks to it.\n  self._initMedia(function (err, bodyObj, resp) {\n    if (err) {\n      cb(err);\n      return;\n    } else {\n      var mediaTmpId = bodyObj.media_id_string;\n      var chunkNumber = 0;\n      var mediaFile = fs.createReadStream(self._file_path, { highWatermark: MAX_FILE_CHUNK_BYTES });\n\n      mediaFile.on('data', function (chunk) {\n        // Pause our file stream from emitting `data` events until the upload of this chunk completes.\n        // Any data that becomes available will remain in the internal buffer.\n        mediaFile.pause();\n        self._isUploading = true;\n\n        self._appendMedia(mediaTmpId, chunk.toString('base64'), chunkNumber, function (err, bodyObj, resp) {\n          self._isUploading = false;\n          if (err) {\n            cb(err);\n          } else {\n            if (self._isUploadComplete()) {\n              // We've hit the end of our stream; send FINALIZE command.\n              self._finalizeMedia(mediaTmpId, cb);\n            } else {\n              // Tell our file stream to start emitting `data` events again.\n              chunkNumber++;\n              mediaFile.resume();\n            }\n          }\n        });\n      });\n\n      mediaFile.on('end', function () {\n        // Mark our file streaming complete, and if done, send FINALIZE command.\n        self._isFileStreamEnded = true;\n        if (self._isUploadComplete()) {\n          self._finalizeMedia(mediaTmpId, cb);\n        }\n      });\n    }\n  })\n}\n\nFileUploader.prototype._isUploadComplete = function () {\n  return !this._isUploading && this._isFileStreamEnded;\n}\n\n  /**\n   * Send FINALIZE command for media object with id `media_id`.\n   *\n   * @param  {String}   media_id\n   * @param  {Function} cb\n   */\nFileUploader.prototype._finalizeMedia = function(media_id, cb) {\n  var self = this;\n  self._twit.post('media/upload', {\n    command: 'FINALIZE',\n    media_id: media_id\n  }, cb);\n}\n\n  /**\n   * Send APPEND command for media object with id `media_id`.\n   * Append the chunk to the media object, then resume streaming our mediaFile.\n   *\n   * @param  {String}   media_id        media_id_string received from Twitter after sending INIT comand.\n   * @param  {String}   chunk_part      Base64-encoded String chunk of the media file.\n   * @param  {Number}   segment_index   Index of the segment.\n   * @param  {Function} cb\n   */\nFileUploader.prototype._appendMedia = function(media_id_string, chunk_part, segment_index, cb) {\n  var self = this;\n  self._twit.post('media/upload', {\n    command: 'APPEND',\n    media_id: media_id_string.toString(),\n    segment_index: segment_index,\n    media: chunk_part,\n  }, cb);\n}\n\n/**\n * Send INIT command for our underlying media object.\n *\n * @param  {Function} cb\n */\nFileUploader.prototype._initMedia = function (cb) {\n  var self = this;\n  var mediaType = mime.lookup(self._file_path);\n  var mediaFileSizeBytes = fs.statSync(self._file_path).size;\n  var shared = self._isSharedMedia;\n  var media_category = 'tweet_image';\n\n  if (mediaType.toLowerCase().indexOf('gif') > -1) {\n    media_category = 'tweet_gif';\n  } else if (mediaType.toLowerCase().indexOf('video') > -1) {\n    media_category = 'tweet_video';\n  }\n\n  // Check the file size - it should not go over 15MB for video.\n  // See https://dev.twitter.com/rest/reference/post/media/upload-chunked\n  if (mediaFileSizeBytes < MAX_FILE_SIZE_BYTES) {\n    self._twit.post('media/upload', {\n      'command': 'INIT',\n      'media_type': mediaType,\n      'total_bytes': mediaFileSizeBytes,\n      'shared': shared,\n      'media_category': media_category\n    }, cb);\n  } else {\n    var errMsg = util.format('This file is too large. Max size is %dB. Got: %dB.', MAX_FILE_SIZE_BYTES, mediaFileSizeBytes);\n    cb(new Error(errMsg));\n  }\n}\n\nmodule.exports = FileUploader\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}