{"ast":null,"code":"var querystring = require('querystring');\nvar request = require('request');\nvar endpoints = require('./endpoints');\n\n/**\n * Encodes object as a querystring, to be used as the suffix of request URLs.\n * @param  {Object} obj\n * @return {String}\n */\nexports.makeQueryString = function (obj) {\n  var qs = querystring.stringify(obj);\n  qs = qs.replace(/\\!/g, \"%21\").replace(/\\'/g, \"%27\").replace(/\\(/g, \"%28\").replace(/\\)/g, \"%29\").replace(/\\*/g, \"%2A\");\n  return qs;\n};\n\n/**\n * For each `/:param` fragment in path, move the value in params\n * at that key to path. If the key is not found in params, throw.\n * Modifies both params and path values.\n *\n * @param  {Objet} params  Object used to build path.\n * @param  {String} path   String to transform.\n * @return {Undefined}\n *\n */\nexports.moveParamsIntoPath = function (params, path) {\n  var rgxParam = /\\/:(\\w+)/g;\n  var missingParamErr = null;\n  path = path.replace(rgxParam, function (hit) {\n    var paramName = hit.slice(2);\n    var suppliedVal = params[paramName];\n    if (!suppliedVal) {\n      throw new Error('Twit: Params object is missing a required parameter for this request: `' + paramName + '`');\n    }\n    var retVal = '/' + suppliedVal;\n    delete params[paramName];\n    return retVal;\n  });\n  return path;\n};\n\n/**\n * When Twitter returns a response that looks like an error response,\n * use this function to attach the error info in the response body to `err`.\n *\n * @param  {Error} err   Error instance to which body info will be attached\n * @param  {Object} body JSON object that is the deserialized HTTP response body received from Twitter\n * @return {Undefined}\n */\nexports.attachBodyInfoToError = function (err, body) {\n  err.twitterReply = body;\n  if (!body) {\n    return;\n  }\n  if (body.error) {\n    // the body itself is an error object\n    err.message = body.error;\n    err.allErrors = err.allErrors.concat([body]);\n  } else if (body.errors && body.errors.length) {\n    // body contains multiple error objects\n    err.message = body.errors[0].message;\n    err.code = body.errors[0].code;\n    err.allErrors = err.allErrors.concat(body.errors);\n  }\n};\nexports.makeTwitError = function (message) {\n  var err = new Error();\n  if (message) {\n    err.message = message;\n  }\n  err.code = null;\n  err.allErrors = [];\n  err.twitterReply = null;\n  return err;\n};\n\n/**\n * Get a bearer token for OAuth2\n * @param  {String}   consumer_key\n * @param  {String}   consumer_secret\n * @param  {Function} cb\n *\n * Calls `cb` with Error, String\n *\n * Error (if it exists) is guaranteed to be Twit error-formatted.\n * String (if it exists) is the bearer token received from Twitter.\n */\nexports.getBearerToken = function (consumer_key, consumer_secret, cb) {\n  // use OAuth 2 for app-only auth (Twitter requires this)\n  // get a bearer token using our app's credentials\n  var b64Credentials = new Buffer(consumer_key + ':' + consumer_secret).toString('base64');\n  request.post({\n    url: endpoints.API_HOST + 'oauth2/token',\n    headers: {\n      'Authorization': 'Basic ' + b64Credentials,\n      'Content-Type': 'application/x-www-form-urlencoded;charset=UTF-8'\n    },\n    body: 'grant_type=client_credentials',\n    json: true\n  }, function (err, res, body) {\n    if (err) {\n      var error = exports.makeTwitError(err.toString());\n      exports.attachBodyInfoToError(error, body);\n      return cb(error, body, res);\n    }\n    if (!body) {\n      var error = exports.makeTwitError('Not valid reply from Twitter upon obtaining bearer token');\n      exports.attachBodyInfoToError(error, body);\n      return cb(error, body, res);\n    }\n    if (body.token_type !== 'bearer') {\n      var error = exports.makeTwitError('Unexpected reply from Twitter upon obtaining bearer token');\n      exports.attachBodyInfoToError(error, body);\n      return cb(error, body, res);\n    }\n    return cb(err, body.access_token);\n  });\n};","map":{"version":3,"names":["querystring","require","request","endpoints","exports","makeQueryString","obj","qs","stringify","replace","moveParamsIntoPath","params","path","rgxParam","missingParamErr","hit","paramName","slice","suppliedVal","Error","retVal","attachBodyInfoToError","err","body","twitterReply","error","message","allErrors","concat","errors","length","code","makeTwitError","getBearerToken","consumer_key","consumer_secret","cb","b64Credentials","Buffer","toString","post","url","API_HOST","headers","json","res","token_type","access_token"],"sources":["C:/Users/Sanity/Documents/GitHub/animalbrowsing/node_modules/twit/lib/helpers.js"],"sourcesContent":["var querystring = require('querystring');\nvar request = require('request');\n\nvar endpoints = require('./endpoints');\n\n/**\n * Encodes object as a querystring, to be used as the suffix of request URLs.\n * @param  {Object} obj\n * @return {String}\n */\nexports.makeQueryString = function (obj) {\n  var qs = querystring.stringify(obj)\n  qs = qs.replace(/\\!/g, \"%21\")\n         .replace(/\\'/g, \"%27\")\n         .replace(/\\(/g, \"%28\")\n         .replace(/\\)/g, \"%29\")\n         .replace(/\\*/g, \"%2A\");\n  return qs\n}\n\n/**\n * For each `/:param` fragment in path, move the value in params\n * at that key to path. If the key is not found in params, throw.\n * Modifies both params and path values.\n *\n * @param  {Objet} params  Object used to build path.\n * @param  {String} path   String to transform.\n * @return {Undefined}\n *\n */\nexports.moveParamsIntoPath = function (params, path) {\n  var rgxParam = /\\/:(\\w+)/g\n  var missingParamErr = null\n\n  path = path.replace(rgxParam, function (hit) {\n    var paramName = hit.slice(2)\n    var suppliedVal = params[paramName]\n    if (!suppliedVal) {\n      throw new Error('Twit: Params object is missing a required parameter for this request: `'+paramName+'`')\n    }\n    var retVal = '/' + suppliedVal\n    delete params[paramName]\n    return retVal\n  })\n  return path\n}\n\n/**\n * When Twitter returns a response that looks like an error response,\n * use this function to attach the error info in the response body to `err`.\n *\n * @param  {Error} err   Error instance to which body info will be attached\n * @param  {Object} body JSON object that is the deserialized HTTP response body received from Twitter\n * @return {Undefined}\n */\nexports.attachBodyInfoToError = function (err, body) {\n  err.twitterReply = body;\n  if (!body) {\n    return\n  }\n  if (body.error) {\n    // the body itself is an error object\n    err.message = body.error\n    err.allErrors = err.allErrors.concat([body])\n  } else if (body.errors && body.errors.length) {\n    // body contains multiple error objects\n    err.message = body.errors[0].message;\n    err.code = body.errors[0].code;\n    err.allErrors = err.allErrors.concat(body.errors)\n  }\n}\n\nexports.makeTwitError = function (message) {\n  var err = new Error()\n  if (message) {\n    err.message = message\n  }\n  err.code = null\n  err.allErrors = []\n  err.twitterReply = null\n  return err\n}\n\n/**\n * Get a bearer token for OAuth2\n * @param  {String}   consumer_key\n * @param  {String}   consumer_secret\n * @param  {Function} cb\n *\n * Calls `cb` with Error, String\n *\n * Error (if it exists) is guaranteed to be Twit error-formatted.\n * String (if it exists) is the bearer token received from Twitter.\n */\nexports.getBearerToken = function (consumer_key, consumer_secret, cb) {\n  // use OAuth 2 for app-only auth (Twitter requires this)\n  // get a bearer token using our app's credentials\n  var b64Credentials = new Buffer(consumer_key + ':' + consumer_secret).toString('base64');\n  request.post({\n    url: endpoints.API_HOST + 'oauth2/token',\n    headers: {\n      'Authorization': 'Basic ' + b64Credentials,\n      'Content-Type': 'application/x-www-form-urlencoded;charset=UTF-8'\n    },\n    body: 'grant_type=client_credentials',\n    json: true,\n  }, function (err, res, body) {\n    if (err) {\n      var error = exports.makeTwitError(err.toString());\n      exports.attachBodyInfoToError(error, body);\n      return cb(error, body, res);\n    }\n\n    if ( !body ) {\n      var error = exports.makeTwitError('Not valid reply from Twitter upon obtaining bearer token');\n      exports.attachBodyInfoToError(error, body);\n      return cb(error, body, res);\n    }\n\n    if (body.token_type !== 'bearer') {\n      var error = exports.makeTwitError('Unexpected reply from Twitter upon obtaining bearer token');\n      exports.attachBodyInfoToError(error, body);\n      return cb(error, body, res);\n    }\n\n    return cb(err, body.access_token);\n  })\n}\n"],"mappings":"AAAA,IAAIA,WAAW,GAAGC,OAAO,CAAC,aAAa,CAAC;AACxC,IAAIC,OAAO,GAAGD,OAAO,CAAC,SAAS,CAAC;AAEhC,IAAIE,SAAS,GAAGF,OAAO,CAAC,aAAa,CAAC;;AAEtC;AACA;AACA;AACA;AACA;AACAG,OAAO,CAACC,eAAe,GAAG,UAAUC,GAAG,EAAE;EACvC,IAAIC,EAAE,GAAGP,WAAW,CAACQ,SAAS,CAACF,GAAG,CAAC;EACnCC,EAAE,GAAGA,EAAE,CAACE,OAAO,CAAC,KAAK,EAAE,KAAK,CAAC,CACrBA,OAAO,CAAC,KAAK,EAAE,KAAK,CAAC,CACrBA,OAAO,CAAC,KAAK,EAAE,KAAK,CAAC,CACrBA,OAAO,CAAC,KAAK,EAAE,KAAK,CAAC,CACrBA,OAAO,CAAC,KAAK,EAAE,KAAK,CAAC;EAC7B,OAAOF,EAAE;AACX,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAH,OAAO,CAACM,kBAAkB,GAAG,UAAUC,MAAM,EAAEC,IAAI,EAAE;EACnD,IAAIC,QAAQ,GAAG,WAAW;EAC1B,IAAIC,eAAe,GAAG,IAAI;EAE1BF,IAAI,GAAGA,IAAI,CAACH,OAAO,CAACI,QAAQ,EAAE,UAAUE,GAAG,EAAE;IAC3C,IAAIC,SAAS,GAAGD,GAAG,CAACE,KAAK,CAAC,CAAC,CAAC;IAC5B,IAAIC,WAAW,GAAGP,MAAM,CAACK,SAAS,CAAC;IACnC,IAAI,CAACE,WAAW,EAAE;MAChB,MAAM,IAAIC,KAAK,CAAC,yEAAyE,GAACH,SAAS,GAAC,GAAG,CAAC;IAC1G;IACA,IAAII,MAAM,GAAG,GAAG,GAAGF,WAAW;IAC9B,OAAOP,MAAM,CAACK,SAAS,CAAC;IACxB,OAAOI,MAAM;EACf,CAAC,CAAC;EACF,OAAOR,IAAI;AACb,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAR,OAAO,CAACiB,qBAAqB,GAAG,UAAUC,GAAG,EAAEC,IAAI,EAAE;EACnDD,GAAG,CAACE,YAAY,GAAGD,IAAI;EACvB,IAAI,CAACA,IAAI,EAAE;IACT;EACF;EACA,IAAIA,IAAI,CAACE,KAAK,EAAE;IACd;IACAH,GAAG,CAACI,OAAO,GAAGH,IAAI,CAACE,KAAK;IACxBH,GAAG,CAACK,SAAS,GAAGL,GAAG,CAACK,SAAS,CAACC,MAAM,CAAC,CAACL,IAAI,CAAC,CAAC;EAC9C,CAAC,MAAM,IAAIA,IAAI,CAACM,MAAM,IAAIN,IAAI,CAACM,MAAM,CAACC,MAAM,EAAE;IAC5C;IACAR,GAAG,CAACI,OAAO,GAAGH,IAAI,CAACM,MAAM,CAAC,CAAC,CAAC,CAACH,OAAO;IACpCJ,GAAG,CAACS,IAAI,GAAGR,IAAI,CAACM,MAAM,CAAC,CAAC,CAAC,CAACE,IAAI;IAC9BT,GAAG,CAACK,SAAS,GAAGL,GAAG,CAACK,SAAS,CAACC,MAAM,CAACL,IAAI,CAACM,MAAM,CAAC;EACnD;AACF,CAAC;AAEDzB,OAAO,CAAC4B,aAAa,GAAG,UAAUN,OAAO,EAAE;EACzC,IAAIJ,GAAG,GAAG,IAAIH,KAAK,CAAC,CAAC;EACrB,IAAIO,OAAO,EAAE;IACXJ,GAAG,CAACI,OAAO,GAAGA,OAAO;EACvB;EACAJ,GAAG,CAACS,IAAI,GAAG,IAAI;EACfT,GAAG,CAACK,SAAS,GAAG,EAAE;EAClBL,GAAG,CAACE,YAAY,GAAG,IAAI;EACvB,OAAOF,GAAG;AACZ,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAlB,OAAO,CAAC6B,cAAc,GAAG,UAAUC,YAAY,EAAEC,eAAe,EAAEC,EAAE,EAAE;EACpE;EACA;EACA,IAAIC,cAAc,GAAG,IAAIC,MAAM,CAACJ,YAAY,GAAG,GAAG,GAAGC,eAAe,CAAC,CAACI,QAAQ,CAAC,QAAQ,CAAC;EACxFrC,OAAO,CAACsC,IAAI,CAAC;IACXC,GAAG,EAAEtC,SAAS,CAACuC,QAAQ,GAAG,cAAc;IACxCC,OAAO,EAAE;MACP,eAAe,EAAE,QAAQ,GAAGN,cAAc;MAC1C,cAAc,EAAE;IAClB,CAAC;IACDd,IAAI,EAAE,+BAA+B;IACrCqB,IAAI,EAAE;EACR,CAAC,EAAE,UAAUtB,GAAG,EAAEuB,GAAG,EAAEtB,IAAI,EAAE;IAC3B,IAAID,GAAG,EAAE;MACP,IAAIG,KAAK,GAAGrB,OAAO,CAAC4B,aAAa,CAACV,GAAG,CAACiB,QAAQ,CAAC,CAAC,CAAC;MACjDnC,OAAO,CAACiB,qBAAqB,CAACI,KAAK,EAAEF,IAAI,CAAC;MAC1C,OAAOa,EAAE,CAACX,KAAK,EAAEF,IAAI,EAAEsB,GAAG,CAAC;IAC7B;IAEA,IAAK,CAACtB,IAAI,EAAG;MACX,IAAIE,KAAK,GAAGrB,OAAO,CAAC4B,aAAa,CAAC,0DAA0D,CAAC;MAC7F5B,OAAO,CAACiB,qBAAqB,CAACI,KAAK,EAAEF,IAAI,CAAC;MAC1C,OAAOa,EAAE,CAACX,KAAK,EAAEF,IAAI,EAAEsB,GAAG,CAAC;IAC7B;IAEA,IAAItB,IAAI,CAACuB,UAAU,KAAK,QAAQ,EAAE;MAChC,IAAIrB,KAAK,GAAGrB,OAAO,CAAC4B,aAAa,CAAC,2DAA2D,CAAC;MAC9F5B,OAAO,CAACiB,qBAAqB,CAACI,KAAK,EAAEF,IAAI,CAAC;MAC1C,OAAOa,EAAE,CAACX,KAAK,EAAEF,IAAI,EAAEsB,GAAG,CAAC;IAC7B;IAEA,OAAOT,EAAE,CAACd,GAAG,EAAEC,IAAI,CAACwB,YAAY,CAAC;EACnC,CAAC,CAAC;AACJ,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}