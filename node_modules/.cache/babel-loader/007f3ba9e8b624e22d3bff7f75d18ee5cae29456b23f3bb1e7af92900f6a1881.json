{"ast":null,"code":"const sortSearch = (table, inputSearch) => {\n  return table.filter(v => {\n    inputSearch = inputSearch.toLowerCase().normalize('NFD').replace(/[\\u0300-\\u036f]/g, \"\");\n    return v.Name.toLowerCase().normalize('NFD').replace(/[\\u0300-\\u036f]/g, \"\").includes(inputSearch) || v.PriceInt.toString().includes(inputSearch) || v.Season.toLowerCase().normalize('NFD').replace(/[\\u0300-\\u036f]/g, \"\").includes(inputSearch) || v.Time.toLowerCase().normalize('NFD').replace(/[\\u0300-\\u036f]/g, \"\").includes(inputSearch) || v.Location && v.Location.toLowerCase().normalize('NFD').replace(/[\\u0300-\\u036f]/g, \"\").includes(inputSearch) || v.Pattern && v.Pattern.toLowerCase().normalize('NFD').replace(/[\\u0300-\\u036f]/g, \"\").includes(inputSearch) || v.Size && v.Size.toLowerCase().normalize('NFD').replace(/[\\u0300-\\u036f]/g, \"\").includes(inputSearch);\n  });\n};\nconst sortSeason = (table, imgEarth, clickCount) => {\n  let btn_season = document.getElementsByClassName(\"btn-season\")[0];\n  switch (clickCount) {\n    case 1:\n      btn_season.src = imgEarth.EarthNPNG;\n      break;\n    case 2:\n      btn_season.src = imgEarth.EarthSPNG;\n      break;\n    case 0:\n    default:\n      btn_season.src = imgEarth.Earth;\n      break;\n  }\n  var time = new Date();\n  let current_month = time.getMonth() + 1;\n  return table.filter(v => {\n    v.Temp = clickCount === 1 ? v.SeasonN : clickCount === 2 ? v.SeasonS : \"\";\n    let Season;\n    switch (clickCount) {\n      case 1:\n        Season = v.SeasonIntN;\n        break;\n      case 2:\n        Season = v.SeasonIntS;\n        break;\n      default:\n        return v;\n    }\n    if (Season.length === 1 && current_month === Season[0]) {\n      // ex: Firefly\n      return true;\n    } else if (Season.length === 2) {\n      // ex: Mar-Apr (3, 4)\n      if (Season[0] < Season[1]) {\n        if (current_month >= Season[0] && current_month <= Season[1]) {\n          return true;\n        }\n      } else if (Season[0] > Season[1]) {\n        if (current_month >= Season[0] || current_month <= Season[1]) {\n          return true;\n        }\n      }\n    } else if (Season.length === 3) {\n      // ex: Mar-Apr, Jun (3, 4, 6) \n      if (current_month === Season[2]) {\n        return true;\n      }\n      if (Season[0] < Season[1]) {\n        if (current_month >= Season[0] && current_month <= Season[1]) {\n          return true;\n        }\n      } else if (Season[0] > Season[1]) {\n        if (current_month >= Season[0] || current_month <= Season[1]) {\n          return true;\n        }\n      }\n    } else if (Season.length === 4) {\n      // ex: Mar-Apr, Jun-Jul (3, 4, 6, 7) \n      if (Season[0] < Season[1]) {\n        if (current_month >= Season[0] && current_month <= Season[1]) {\n          return true;\n        }\n      } else if (Season[2] < Season[3]) {\n        if (current_month >= Season[2] && current_month <= Season[3]) {\n          return true;\n        }\n      } else if (Season[0] > Season[1]) {\n        if (current_month >= Season[0] || current_month <= Season[1]) {\n          return true;\n        }\n      } else if (Season[2] > Season[3]) {\n        if (current_month >= Season[2] || current_month <= Season[3]) {\n          return true;\n        }\n      }\n    }\n    return false;\n  });\n};\nconst sortABC = table => {\n  return [...table].sort((a, b) => a.Name > b.Name ? 1 : a.Name < b.Name ? -1 : 0);\n};\nconst sortPrice = table => {\n  return [...table].sort((a, b) => b.PriceInt - a.PriceInt);\n};\nconst sortReset = table => {\n  return [...table].sort((a, b) => a.Number - b.Number);\n};\nexport { sortSearch, sortSeason, sortABC, sortPrice, sortReset };","map":{"version":3,"names":["sortSearch","table","inputSearch","filter","v","toLowerCase","normalize","replace","Name","includes","PriceInt","toString","Season","Time","Location","Pattern","Size","sortSeason","imgEarth","clickCount","btn_season","document","getElementsByClassName","src","EarthNPNG","EarthSPNG","Earth","time","Date","current_month","getMonth","Temp","SeasonN","SeasonS","SeasonIntN","SeasonIntS","length","sortABC","sort","a","b","sortPrice","sortReset","Number"],"sources":["C:/Users/Sanity/Documents/GitHub/animalbrowsing/src/logic/table.js"],"sourcesContent":["const sortSearch = (table, inputSearch) => {\r\n    return table.filter((v) => {\r\n        inputSearch = inputSearch.toLowerCase().normalize('NFD').replace(/[\\u0300-\\u036f]/g, \"\")\r\n        return (\r\n            v.Name.toLowerCase().normalize('NFD').replace(/[\\u0300-\\u036f]/g, \"\").includes(inputSearch) ||\r\n            v.PriceInt.toString().includes(inputSearch) ||\r\n            v.Season.toLowerCase().normalize('NFD').replace(/[\\u0300-\\u036f]/g, \"\").includes(inputSearch) ||\r\n            v.Time.toLowerCase().normalize('NFD').replace(/[\\u0300-\\u036f]/g, \"\").includes(inputSearch) ||\r\n            (v.Location && v.Location.toLowerCase().normalize('NFD').replace(/[\\u0300-\\u036f]/g, \"\").includes(inputSearch)) ||\r\n            (v.Pattern && v.Pattern.toLowerCase().normalize('NFD').replace(/[\\u0300-\\u036f]/g, \"\").includes(inputSearch)) ||\r\n            (v.Size && v.Size.toLowerCase().normalize('NFD').replace(/[\\u0300-\\u036f]/g, \"\").includes(inputSearch)) \r\n            )\r\n        })\r\n}\r\nconst sortSeason = (table, imgEarth, clickCount) => {\r\n    let btn_season = document.getElementsByClassName(\"btn-season\")[0]\r\n    switch(clickCount) {\r\n        case 1:\r\n            btn_season.src = imgEarth.EarthNPNG\r\n            break;\r\n        case 2:\r\n            btn_season.src = imgEarth.EarthSPNG\r\n            break;\r\n        case 0:\r\n        default:\r\n            btn_season.src = imgEarth.Earth                \r\n            break;\r\n    }\r\n\r\n    var time = new Date();\r\n    let current_month = time.getMonth() + 1\r\n\r\n    return table.filter((v) => {\r\n        v.Temp = clickCount === 1 ? v.SeasonN : clickCount === 2 ? v.SeasonS : \"\"  \r\n        let Season\r\n        switch(clickCount){\r\n            case 1:\r\n                Season = v.SeasonIntN\r\n                break\r\n            case 2:\r\n                Season = v.SeasonIntS\r\n                break\r\n            default:\r\n                return v\r\n        }\r\n\r\n        if(Season.length === 1 && current_month === Season[0]) { // ex: Firefly\r\n                return true\r\n        }\r\n        else if(Season.length === 2) { // ex: Mar-Apr (3, 4)\r\n            if(Season[0] < Season[1]) {\r\n                if(current_month >=  Season[0] && current_month <=  Season[1]) {\r\n                    return true\r\n                }\r\n            }\r\n            else if(Season[0] > Season[1]) {\r\n                if(current_month >=  Season[0] || current_month <=  Season[1]) {\r\n                    return true\r\n                } \r\n            }\r\n        }\r\n        else if(Season.length === 3) { // ex: Mar-Apr, Jun (3, 4, 6) \r\n            if(current_month === Season[2]) {\r\n                return true\r\n            }\r\n            if(Season[0] < Season[1]) {\r\n                if(current_month >=  Season[0] && current_month <=  Season[1]) {\r\n                    return true\r\n                }\r\n            }\r\n            else if(Season[0] > Season[1]) {\r\n                if(current_month >=  Season[0] || current_month <=  Season[1]) {\r\n                    return true\r\n                } \r\n            }\r\n        }\r\n        else if(Season.length === 4) { // ex: Mar-Apr, Jun-Jul (3, 4, 6, 7) \r\n            if(Season[0] < Season[1]) {\r\n                if(current_month >=  Season[0] && current_month <=  Season[1]) {\r\n                    return true\r\n                }\r\n            }\r\n            else if(Season[2] < Season[3]) {\r\n                if(current_month >=  Season[2] && current_month <=  Season[3]) {\r\n                    return true\r\n                }\r\n            }\r\n            else if(Season[0] > Season[1]) {\r\n                if(current_month >=  Season[0] || current_month <=  Season[1]) {\r\n                    return true\r\n                }\r\n            }\r\n            else if(Season[2] > Season[3]) {\r\n                if(current_month >=  Season[2] || current_month <=  Season[3]) {\r\n                    return true\r\n                }\r\n            }\r\n        }\r\n\r\n        return false\r\n    })\r\n}\r\nconst sortABC = (table) => { \r\n    return [...table].sort((a, b) => \r\n        a.Name > b.Name ? 1 :\r\n        a.Name < b.Name ? -1 : 0)\r\n}\r\nconst sortPrice = (table) => { \r\n    return [...table].sort((a, b) => b.PriceInt - a.PriceInt)\r\n}\r\nconst sortReset = (table) => { \r\n    return [...table].sort((a, b) => a.Number - b.Number)\r\n}\r\n\r\nexport { sortSearch, sortSeason, sortABC, sortPrice, sortReset }"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}