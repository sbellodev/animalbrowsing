{"ast":null,"code":"import React, { useState, useEffect } from 'react';\nimport Twit from 'twit'; // Import the Twit library or the module you're using for Twitter API requests\n\nconst twitterConfig = {\n  // Your Twitter API keys and tokens here\n  consumer_key: \"m4sdHFsufWmJibYtW800bJhVq\",\n  consumer_secret: \"cM4McjWo9NjkxJ39H1R6lu9GDbvN5GOGOIrrVVjfnEtJ36QZSn\",\n  access_token: \"1090069576744873984-AJRiffeBb1wCIjBRfx60SV68mDahaH\",\n  access_token_secret: \"AtTdwnAgicyvgTOfETDKlhKrUXOVFEIrLXIX9KlK91UzX\"\n};\nconst T = new Twit(twitterConfig);\nconst fetchTweets = () => {\n  T.get('search/tweets', {\n    tweet_mode: 'extended',\n    q: '#AnimalCrossing turnip -DodocodesN -TurnipsExchange -@ -rt -rts -appreciated -like -reply -filter:nativeretweets',\n    result_type: 'recent',\n    count: 20\n  }, (err, data, response) => {\n    if (err) {\n      console.error(err);\n      return;\n    }\n    const filteredTweets = data.statuses.map(tweet => ({\n      id: tweet.id_str,\n      screen_name: tweet.user.screen_name,\n      profile_image: tweet.user.profile_image_url,\n      text: tweet.full_text,\n      entities: tweet.entities,\n      date: tweet.created_at\n    }));\n    return filteredTweets;\n    setTweets(filteredTweets);\n  });\n};\nexport default fetchTweets;","map":{"version":3,"names":["React","useState","useEffect","Twit","twitterConfig","consumer_key","consumer_secret","access_token","access_token_secret","T","fetchTweets","get","tweet_mode","q","result_type","count","err","data","response","console","error","filteredTweets","statuses","map","tweet","id","id_str","screen_name","user","profile_image","profile_image_url","text","full_text","entities","date","created_at","setTweets"],"sources":["C:/Users/Sanity/Documents/GitHub/animalbrowsing/src/content/TwitterConfig.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport Twit from 'twit'; // Import the Twit library or the module you're using for Twitter API requests\r\n\r\nconst twitterConfig = {\r\n  // Your Twitter API keys and tokens here\r\n  consumer_key : \"m4sdHFsufWmJibYtW800bJhVq\",\r\n  consumer_secret : \"cM4McjWo9NjkxJ39H1R6lu9GDbvN5GOGOIrrVVjfnEtJ36QZSn\",\r\n  access_token : \"1090069576744873984-AJRiffeBb1wCIjBRfx60SV68mDahaH\",\r\n  access_token_secret : \"AtTdwnAgicyvgTOfETDKlhKrUXOVFEIrLXIX9KlK91UzX\"\r\n};\r\n\r\nconst T = new Twit(twitterConfig);\r\n\r\nconst fetchTweets = () => {\r\n    T.get(\r\n        'search/tweets',\r\n        {\r\n        tweet_mode: 'extended',\r\n        q: '#AnimalCrossing turnip -DodocodesN -TurnipsExchange -@ -rt -rts -appreciated -like -reply -filter:nativeretweets',\r\n        result_type: 'recent',\r\n        count: 20,\r\n        },\r\n        (err, data, response) => {\r\n        if (err) {\r\n            console.error(err);\r\n            return;\r\n        }\r\n\r\n        const filteredTweets = data.statuses.map((tweet) => ({\r\n            id: tweet.id_str,\r\n            screen_name: tweet.user.screen_name,\r\n            profile_image: tweet.user.profile_image_url,\r\n            text: tweet.full_text,\r\n            entities: tweet.entities,\r\n            date: tweet.created_at,\r\n        }));\r\n\r\n        return filteredTweets\r\n        setTweets(filteredTweets);\r\n        }\r\n    );\r\n};\r\n\r\nexport default fetchTweets;\r\n"],"mappings":"AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,IAAI,MAAM,MAAM,CAAC,CAAC;;AAEzB,MAAMC,aAAa,GAAG;EACpB;EACAC,YAAY,EAAG,2BAA2B;EAC1CC,eAAe,EAAG,oDAAoD;EACtEC,YAAY,EAAG,oDAAoD;EACnEC,mBAAmB,EAAG;AACxB,CAAC;AAED,MAAMC,CAAC,GAAG,IAAIN,IAAI,CAACC,aAAa,CAAC;AAEjC,MAAMM,WAAW,GAAGA,CAAA,KAAM;EACtBD,CAAC,CAACE,GAAG,CACD,eAAe,EACf;IACAC,UAAU,EAAE,UAAU;IACtBC,CAAC,EAAE,kHAAkH;IACrHC,WAAW,EAAE,QAAQ;IACrBC,KAAK,EAAE;EACP,CAAC,EACD,CAACC,GAAG,EAAEC,IAAI,EAAEC,QAAQ,KAAK;IACzB,IAAIF,GAAG,EAAE;MACLG,OAAO,CAACC,KAAK,CAACJ,GAAG,CAAC;MAClB;IACJ;IAEA,MAAMK,cAAc,GAAGJ,IAAI,CAACK,QAAQ,CAACC,GAAG,CAAEC,KAAK,KAAM;MACjDC,EAAE,EAAED,KAAK,CAACE,MAAM;MAChBC,WAAW,EAAEH,KAAK,CAACI,IAAI,CAACD,WAAW;MACnCE,aAAa,EAAEL,KAAK,CAACI,IAAI,CAACE,iBAAiB;MAC3CC,IAAI,EAAEP,KAAK,CAACQ,SAAS;MACrBC,QAAQ,EAAET,KAAK,CAACS,QAAQ;MACxBC,IAAI,EAAEV,KAAK,CAACW;IAChB,CAAC,CAAC,CAAC;IAEH,OAAOd,cAAc;IACrBe,SAAS,CAACf,cAAc,CAAC;EACzB,CACJ,CAAC;AACL,CAAC;AAED,eAAeX,WAAW"},"metadata":{},"sourceType":"module","externalDependencies":[]}