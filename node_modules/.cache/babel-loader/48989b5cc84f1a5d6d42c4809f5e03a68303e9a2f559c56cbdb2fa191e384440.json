{"ast":null,"code":"//\n//  Twitter API Wrapper\n//\nvar assert = require('assert');\nvar Promise = require('bluebird');\nvar request = require('request');\nvar util = require('util');\nvar endpoints = require('./endpoints');\nvar FileUploader = require('./file_uploader');\nvar helpers = require('./helpers');\nvar StreamingAPIConnection = require('./streaming-api-connection');\nvar STATUS_CODES_TO_ABORT_ON = require('./settings').STATUS_CODES_TO_ABORT_ON;\n\n// config values required for app-only auth\nvar required_for_app_auth = ['consumer_key', 'consumer_secret'];\n\n// config values required for user auth (superset of app-only auth)\nvar required_for_user_auth = required_for_app_auth.concat(['access_token', 'access_token_secret']);\nvar FORMDATA_PATHS = ['media/upload', 'account/update_profile_image', 'account/update_profile_background_image'];\nvar JSONPAYLOAD_PATHS = ['media/metadata/create', 'direct_messages/events/new', 'direct_messages/welcome_messages/new', 'direct_messages/welcome_messages/rules/new'];\n\n//\n//  Twitter\n//\nvar Twitter = function (config) {\n  if (!(this instanceof Twitter)) {\n    return new Twitter(config);\n  }\n  var self = this;\n  var credentials = {\n    consumer_key: config.consumer_key,\n    consumer_secret: config.consumer_secret,\n    // access_token and access_token_secret only required for user auth\n    access_token: config.access_token,\n    access_token_secret: config.access_token_secret,\n    // flag indicating whether requests should be made with application-only auth\n    app_only_auth: config.app_only_auth\n  };\n  this._validateConfigOrThrow(config);\n  this.config = config;\n  this._twitter_time_minus_local_time_ms = 0;\n};\nTwitter.prototype.get = function (path, params, callback) {\n  return this.request('GET', path, params, callback);\n};\nTwitter.prototype.post = function (path, params, callback) {\n  return this.request('POST', path, params, callback);\n};\nTwitter.prototype.delete = function (path, params, callback) {\n  return this.request('DELETE', path, params, callback);\n};\nTwitter.prototype.request = function (method, path, params, callback) {\n  var self = this;\n  assert(method == 'GET' || method == 'POST' || method == 'DELETE');\n  // if no `params` is specified but a callback is, use default params\n  if (typeof params === 'function') {\n    callback = params;\n    params = {};\n  }\n  return new Promise(function (resolve, reject) {\n    var _returnErrorToUser = function (err) {\n      if (callback && typeof callback === 'function') {\n        callback(err, null, null);\n      } else {\n        reject(err);\n      }\n    };\n    self._buildReqOpts(method, path, params, false, function (err, reqOpts) {\n      if (err) {\n        _returnErrorToUser(err);\n        return;\n      }\n      var twitOptions = params && params.twit_options || {};\n      process.nextTick(function () {\n        // ensure all HTTP i/o occurs after the user has a chance to bind their event handlers\n        self._doRestApiRequest(reqOpts, twitOptions, method, function (err, parsedBody, resp) {\n          self._updateClockOffsetFromResponse(resp);\n          var peerCertificate = resp && resp.socket && resp.socket.getPeerCertificate();\n          if (self.config.trusted_cert_fingerprints && peerCertificate) {\n            if (!resp.socket.authorized) {\n              // The peer certificate was not signed by one of the authorized CA's.\n              var authErrMsg = resp.socket.authorizationError.toString();\n              var err = helpers.makeTwitError('The peer certificate was not signed; ' + authErrMsg);\n              _returnErrorToUser(err);\n              return;\n            }\n            var fingerprint = peerCertificate.fingerprint;\n            var trustedFingerprints = self.config.trusted_cert_fingerprints;\n            if (trustedFingerprints.indexOf(fingerprint) === -1) {\n              var errMsg = util.format('Certificate untrusted. Trusted fingerprints are: %s. Got fingerprint: %s.', trustedFingerprints.join(','), fingerprint);\n              var err = new Error(errMsg);\n              _returnErrorToUser(err);\n              return;\n            }\n          }\n          if (callback && typeof callback === 'function') {\n            callback(err, parsedBody, resp);\n          } else {\n            if (err) {\n              reject(err);\n            } else {\n              resolve({\n                data: parsedBody,\n                resp: resp\n              });\n            }\n          }\n          return;\n        });\n      });\n    });\n  });\n};\n\n/**\n * Uploads a file to Twitter via the POST media/upload (chunked) API.\n * Use this as an easier alternative to doing the INIT/APPEND/FINALIZE commands yourself.\n * Returns the response from the FINALIZE command, or if an error occurs along the way,\n * the first argument to `cb` will be populated with a non-null Error.\n *\n *\n * `params` is an Object of the form:\n * {\n *   file_path: String // Absolute path of file to be uploaded.\n * }\n *\n * @param  {Object}  params  options object (described above).\n * @param  {cb}      cb      callback of the form: function (err, bodyObj, resp)\n */\nTwitter.prototype.postMediaChunked = function (params, cb) {\n  var self = this;\n  try {\n    var fileUploader = new FileUploader(params, self);\n  } catch (err) {\n    cb(err);\n    return;\n  }\n  fileUploader.upload(cb);\n};\nTwitter.prototype._updateClockOffsetFromResponse = function (resp) {\n  var self = this;\n  if (resp && resp.headers && resp.headers.date && new Date(resp.headers.date).toString() !== 'Invalid Date') {\n    var twitterTimeMs = new Date(resp.headers.date).getTime();\n    self._twitter_time_minus_local_time_ms = twitterTimeMs - Date.now();\n  }\n};\n\n/**\n * Builds and returns an options object ready to pass to `request()`\n * @param  {String}   method      \"GET\" or \"POST\"\n * @param  {String}   path        REST API resource uri (eg. \"statuses/destroy/:id\")\n * @param  {Object}   params      user's params object\n * @param  {Boolean}  isStreaming Flag indicating if it's a request to the Streaming API (different endpoint)\n * @returns {Undefined}\n *\n * Calls `callback` with Error, Object where Object is an options object ready to pass to `request()`.\n *\n * Returns error raised (if any) by `helpers.moveParamsIntoPath()`\n */\nTwitter.prototype._buildReqOpts = function (method, path, params, isStreaming, callback) {\n  var self = this;\n  if (!params) {\n    params = {};\n  }\n  // clone `params` object so we can modify it without modifying the user's reference\n  var paramsClone = JSON.parse(JSON.stringify(params));\n  // convert any arrays in `paramsClone` to comma-seperated strings\n  var finalParams = this.normalizeParams(paramsClone);\n  delete finalParams.twit_options;\n\n  // the options object passed to `request` used to perform the HTTP request\n  var reqOpts = {\n    headers: {\n      'Accept': '*/*',\n      'User-Agent': 'twit-client'\n    },\n    gzip: true,\n    encoding: null\n  };\n  if (typeof self.config.timeout_ms !== 'undefined' && !isStreaming) {\n    reqOpts.timeout = self.config.timeout_ms;\n  }\n  if (typeof self.config.strictSSL !== 'undefined') {\n    reqOpts.strictSSL = self.config.strictSSL;\n  }\n\n  // finalize the `path` value by building it using user-supplied params\n  // when json parameters should not be in the payload\n  if (JSONPAYLOAD_PATHS.indexOf(path) === -1) {\n    try {\n      path = helpers.moveParamsIntoPath(finalParams, path);\n    } catch (e) {\n      callback(e, null, null);\n      return;\n    }\n  }\n  if (path.match(/^https?:\\/\\//i)) {\n    // This is a full url request\n    reqOpts.url = path;\n  } else if (isStreaming) {\n    // This is a Streaming API request.\n\n    var stream_endpoint_map = {\n      user: endpoints.USER_STREAM,\n      site: endpoints.SITE_STREAM\n    };\n    var endpoint = stream_endpoint_map[path] || endpoints.PUB_STREAM;\n    reqOpts.url = endpoint + path + '.json';\n  } else {\n    // This is a REST API request.\n\n    if (path.indexOf('media/') !== -1) {\n      // For media/upload, use a different endpoint.\n      reqOpts.url = endpoints.MEDIA_UPLOAD + path + '.json';\n    } else {\n      reqOpts.url = endpoints.REST_ROOT + path + '.json';\n    }\n    if (FORMDATA_PATHS.indexOf(path) !== -1) {\n      reqOpts.headers['Content-type'] = 'multipart/form-data';\n      reqOpts.form = finalParams;\n      // set finalParams to empty object so we don't append a query string\n      // of the params\n      finalParams = {};\n    } else if (JSONPAYLOAD_PATHS.indexOf(path) !== -1) {\n      reqOpts.headers['Content-type'] = 'application/json';\n      reqOpts.json = true;\n      reqOpts.body = finalParams;\n      // as above, to avoid appending query string for body params\n      finalParams = {};\n    } else {\n      reqOpts.headers['Content-type'] = 'application/json';\n    }\n  }\n  if (isStreaming) {\n    reqOpts.form = finalParams;\n  } else if (Object.keys(finalParams).length) {\n    // not all of the user's parameters were used to build the request path\n    // add them as a query string\n    var qs = helpers.makeQueryString(finalParams);\n    reqOpts.url += '?' + qs;\n  }\n  if (!self.config.app_only_auth) {\n    // with user auth, we can just pass an oauth object to requests\n    // to have the request signed\n    var oauth_ts = Date.now() + self._twitter_time_minus_local_time_ms;\n    reqOpts.oauth = {\n      consumer_key: self.config.consumer_key,\n      consumer_secret: self.config.consumer_secret,\n      token: self.config.access_token,\n      token_secret: self.config.access_token_secret,\n      timestamp: Math.floor(oauth_ts / 1000).toString()\n    };\n    callback(null, reqOpts);\n    return;\n  } else {\n    // we're using app-only auth, so we need to ensure we have a bearer token\n    // Once we have a bearer token, add the Authorization header and return the fully qualified `reqOpts`.\n    self._getBearerToken(function (err, bearerToken) {\n      if (err) {\n        callback(err, null);\n        return;\n      }\n      reqOpts.headers['Authorization'] = 'Bearer ' + bearerToken;\n      callback(null, reqOpts);\n      return;\n    });\n  }\n};\n\n/**\n * Make HTTP request to Twitter REST API.\n * @param  {Object}   reqOpts     options object passed to `request()`\n * @param  {Object}   twitOptions\n * @param  {String}   method      \"GET\" or \"POST\"\n * @param  {Function} callback    user's callback\n * @return {Undefined}\n */\nTwitter.prototype._doRestApiRequest = function (reqOpts, twitOptions, method, callback) {\n  var request_method = request[method.toLowerCase()];\n  var req = request_method(reqOpts);\n  var body = '';\n  var response = null;\n  var onRequestComplete = function () {\n    if (body !== '') {\n      try {\n        body = JSON.parse(body);\n      } catch (jsonDecodeError) {\n        // there was no transport-level error, but a JSON object could not be decoded from the request body\n        // surface this to the caller\n        var err = helpers.makeTwitError('JSON decode error: Twitter HTTP response body was not valid JSON');\n        err.statusCode = response ? response.statusCode : null;\n        err.allErrors.concat({\n          error: jsonDecodeError.toString()\n        });\n        callback(err, body, response);\n        return;\n      }\n    }\n    if (typeof body === 'object' && (body.error || body.errors)) {\n      // we got a Twitter API-level error response\n      // place the errors in the HTTP response body into the Error object and pass control to caller\n      var err = helpers.makeTwitError('Twitter API Error');\n      err.statusCode = response ? response.statusCode : null;\n      helpers.attachBodyInfoToError(err, body);\n      callback(err, body, response);\n      return;\n    }\n\n    // success case - no errors in HTTP response body\n    callback(err, body, response);\n  };\n  req.on('response', function (res) {\n    response = res;\n    // read data from `request` object which contains the decompressed HTTP response body,\n    // `response` is the unmodified http.IncomingMessage object which may contain compressed data\n    req.on('data', function (chunk) {\n      body += chunk.toString('utf8');\n    });\n    // we're done reading the response\n    req.on('end', function () {\n      onRequestComplete();\n    });\n  });\n  req.on('error', function (err) {\n    // transport-level error occurred - likely a socket error\n    if (twitOptions.retry && STATUS_CODES_TO_ABORT_ON.indexOf(err.statusCode) !== -1) {\n      // retry the request since retries were specified and we got a status code we should retry on\n      self.request(method, path, params, callback);\n      return;\n    } else {\n      // pass the transport-level error to the caller\n      err.statusCode = null;\n      err.code = null;\n      err.allErrors = [];\n      helpers.attachBodyInfoToError(err, body);\n      callback(err, body, response);\n      return;\n    }\n  });\n};\n\n/**\n * Creates/starts a connection object that stays connected to Twitter's servers\n * using Twitter's rules.\n *\n * @param  {String} path   Resource path to connect to (eg. \"statuses/sample\")\n * @param  {Object} params user's params object\n * @return {StreamingAPIConnection}        [description]\n */\nTwitter.prototype.stream = function (path, params) {\n  var self = this;\n  var twitOptions = params && params.twit_options || {};\n  var streamingConnection = new StreamingAPIConnection();\n  self._buildReqOpts('POST', path, params, true, function (err, reqOpts) {\n    if (err) {\n      // we can get an error if we fail to obtain a bearer token or construct reqOpts\n      // surface this on the streamingConnection instance (where a user may register their error handler)\n      streamingConnection.emit('error', err);\n      return;\n    }\n    // set the properties required to start the connection\n    streamingConnection.reqOpts = reqOpts;\n    streamingConnection.twitOptions = twitOptions;\n    process.nextTick(function () {\n      streamingConnection.start();\n    });\n  });\n  return streamingConnection;\n};\n\n/**\n * Gets bearer token from cached reference on `self`, or fetches a new one and sets it on `self`.\n *\n * @param  {Function} callback Function to invoke with (Error, bearerToken)\n * @return {Undefined}\n */\nTwitter.prototype._getBearerToken = function (callback) {\n  var self = this;\n  if (self._bearerToken) {\n    return callback(null, self._bearerToken);\n  }\n  helpers.getBearerToken(self.config.consumer_key, self.config.consumer_secret, function (err, bearerToken) {\n    if (err) {\n      // return the fully-qualified Twit Error object to caller\n      callback(err, null);\n      return;\n    }\n    self._bearerToken = bearerToken;\n    callback(null, self._bearerToken);\n    return;\n  });\n};\nTwitter.prototype.normalizeParams = function (params) {\n  var normalized = params;\n  if (params && typeof params === 'object') {\n    Object.keys(params).forEach(function (key) {\n      var value = params[key];\n      // replace any arrays in `params` with comma-separated string\n      if (Array.isArray(value)) normalized[key] = value.join(',');\n    });\n  } else if (!params) {\n    normalized = {};\n  }\n  return normalized;\n};\nTwitter.prototype.setAuth = function (auth) {\n  var self = this;\n  var configKeys = ['consumer_key', 'consumer_secret', 'access_token', 'access_token_secret'];\n\n  // update config\n  configKeys.forEach(function (k) {\n    if (auth[k]) {\n      self.config[k] = auth[k];\n    }\n  });\n  this._validateConfigOrThrow(self.config);\n};\nTwitter.prototype.getAuth = function () {\n  return this.config;\n};\n\n//\n// Check that the required auth credentials are present in `config`.\n// @param {Object}  config  Object containing credentials for REST API auth\n//\nTwitter.prototype._validateConfigOrThrow = function (config) {\n  //check config for proper format\n  if (typeof config !== 'object') {\n    throw new TypeError('config must be object, got ' + typeof config);\n  }\n  if (typeof config.timeout_ms !== 'undefined' && isNaN(Number(config.timeout_ms))) {\n    throw new TypeError('Twit config `timeout_ms` must be a Number. Got: ' + config.timeout_ms + '.');\n  }\n  if (typeof config.strictSSL !== 'undefined' && typeof config.strictSSL !== 'boolean') {\n    throw new TypeError('Twit config `strictSSL` must be a Boolean. Got: ' + config.strictSSL + '.');\n  }\n  if (config.app_only_auth) {\n    var auth_type = 'app-only auth';\n    var required_keys = required_for_app_auth;\n  } else {\n    var auth_type = 'user auth';\n    var required_keys = required_for_user_auth;\n  }\n  required_keys.forEach(function (req_key) {\n    if (!config[req_key]) {\n      var err_msg = util.format('Twit config must include `%s` when using %s.', req_key, auth_type);\n      throw new Error(err_msg);\n    }\n  });\n};\nmodule.exports = Twitter;","map":{"version":3,"names":["assert","require","Promise","request","util","endpoints","FileUploader","helpers","StreamingAPIConnection","STATUS_CODES_TO_ABORT_ON","required_for_app_auth","required_for_user_auth","concat","FORMDATA_PATHS","JSONPAYLOAD_PATHS","Twitter","config","self","credentials","consumer_key","consumer_secret","access_token","access_token_secret","app_only_auth","_validateConfigOrThrow","_twitter_time_minus_local_time_ms","prototype","get","path","params","callback","post","delete","method","resolve","reject","_returnErrorToUser","err","_buildReqOpts","reqOpts","twitOptions","twit_options","process","nextTick","_doRestApiRequest","parsedBody","resp","_updateClockOffsetFromResponse","peerCertificate","socket","getPeerCertificate","trusted_cert_fingerprints","authorized","authErrMsg","authorizationError","toString","makeTwitError","fingerprint","trustedFingerprints","indexOf","errMsg","format","join","Error","data","postMediaChunked","cb","fileUploader","upload","headers","date","Date","twitterTimeMs","getTime","now","isStreaming","paramsClone","JSON","parse","stringify","finalParams","normalizeParams","gzip","encoding","timeout_ms","timeout","strictSSL","moveParamsIntoPath","e","match","url","stream_endpoint_map","user","USER_STREAM","site","SITE_STREAM","endpoint","PUB_STREAM","MEDIA_UPLOAD","REST_ROOT","form","json","body","Object","keys","length","qs","makeQueryString","oauth_ts","oauth","token","token_secret","timestamp","Math","floor","_getBearerToken","bearerToken","request_method","toLowerCase","req","response","onRequestComplete","jsonDecodeError","statusCode","allErrors","error","errors","attachBodyInfoToError","on","res","chunk","retry","code","stream","streamingConnection","emit","start","_bearerToken","getBearerToken","normalized","forEach","key","value","Array","isArray","setAuth","auth","configKeys","k","getAuth","TypeError","isNaN","Number","auth_type","required_keys","req_key","err_msg","module","exports"],"sources":["C:/Users/Sanity/Documents/GitHub/animalbrowsing/node_modules/twit/lib/twitter.js"],"sourcesContent":["//\n//  Twitter API Wrapper\n//\nvar assert = require('assert');\nvar Promise = require('bluebird');\nvar request = require('request');\nvar util = require('util');\nvar endpoints = require('./endpoints');\nvar FileUploader = require('./file_uploader');\nvar helpers = require('./helpers');\nvar StreamingAPIConnection = require('./streaming-api-connection');\nvar STATUS_CODES_TO_ABORT_ON = require('./settings').STATUS_CODES_TO_ABORT_ON;\n\n// config values required for app-only auth\nvar required_for_app_auth = [\n  'consumer_key',\n  'consumer_secret'\n];\n\n// config values required for user auth (superset of app-only auth)\nvar required_for_user_auth = required_for_app_auth.concat([\n  'access_token',\n  'access_token_secret'\n]);\n\nvar FORMDATA_PATHS = [\n  'media/upload',\n  'account/update_profile_image',\n  'account/update_profile_background_image',\n];\n\nvar JSONPAYLOAD_PATHS = [\n  'media/metadata/create',\n  'direct_messages/events/new',\n  'direct_messages/welcome_messages/new',\n  'direct_messages/welcome_messages/rules/new',\n];\n\n//\n//  Twitter\n//\nvar Twitter = function (config) {\n  if (!(this instanceof Twitter)) {\n    return new Twitter(config);\n  }\n\n  var self = this\n  var credentials = {\n    consumer_key        : config.consumer_key,\n    consumer_secret     : config.consumer_secret,\n    // access_token and access_token_secret only required for user auth\n    access_token        : config.access_token,\n    access_token_secret : config.access_token_secret,\n    // flag indicating whether requests should be made with application-only auth\n    app_only_auth       : config.app_only_auth,\n  }\n\n  this._validateConfigOrThrow(config);\n  this.config = config;\n  this._twitter_time_minus_local_time_ms = 0;\n}\n\nTwitter.prototype.get = function (path, params, callback) {\n  return this.request('GET', path, params, callback)\n}\n\nTwitter.prototype.post = function (path, params, callback) {\n  return this.request('POST', path, params, callback)\n}\n\nTwitter.prototype.delete = function (path, params, callback) {\n  return this.request('DELETE', path, params, callback)\n}\n\nTwitter.prototype.request = function (method, path, params, callback) {\n  var self = this;\n  assert(method == 'GET' || method == 'POST' || method == 'DELETE');\n  // if no `params` is specified but a callback is, use default params\n  if (typeof params === 'function') {\n    callback = params\n    params = {}\n  }\n\n  return new Promise(function (resolve, reject) {\n    var _returnErrorToUser = function (err) {\n      if (callback && typeof callback === 'function') {\n        callback(err, null, null);\n      } else {\n        reject(err);\n      }\n    }\n\n    self._buildReqOpts(method, path, params, false, function (err, reqOpts) {\n      if (err) {\n        _returnErrorToUser(err);\n        return\n      }\n\n      var twitOptions = (params && params.twit_options) || {};\n\n      process.nextTick(function () {\n        // ensure all HTTP i/o occurs after the user has a chance to bind their event handlers\n        self._doRestApiRequest(reqOpts, twitOptions, method, function (err, parsedBody, resp) {\n          self._updateClockOffsetFromResponse(resp);\n          var peerCertificate = resp && resp.socket && resp.socket.getPeerCertificate();\n\n          if (self.config.trusted_cert_fingerprints && peerCertificate) {\n            if (!resp.socket.authorized) {\n              // The peer certificate was not signed by one of the authorized CA's.\n              var authErrMsg = resp.socket.authorizationError.toString();\n              var err = helpers.makeTwitError('The peer certificate was not signed; ' + authErrMsg);\n              _returnErrorToUser(err);\n              return;\n            }\n            var fingerprint = peerCertificate.fingerprint;\n            var trustedFingerprints = self.config.trusted_cert_fingerprints;\n            if (trustedFingerprints.indexOf(fingerprint) === -1) {\n              var errMsg = util.format('Certificate untrusted. Trusted fingerprints are: %s. Got fingerprint: %s.',\n                                       trustedFingerprints.join(','), fingerprint);\n              var err = new Error(errMsg);\n              _returnErrorToUser(err);\n              return;\n            }\n          }\n\n          if (callback && typeof callback === 'function') {\n            callback(err, parsedBody, resp);\n          } else {\n            if (err) {\n              reject(err)\n            } else {\n              resolve({ data: parsedBody, resp: resp });\n            }\n          }\n\n          return;\n        })\n      })\n    });\n  });\n}\n\n/**\n * Uploads a file to Twitter via the POST media/upload (chunked) API.\n * Use this as an easier alternative to doing the INIT/APPEND/FINALIZE commands yourself.\n * Returns the response from the FINALIZE command, or if an error occurs along the way,\n * the first argument to `cb` will be populated with a non-null Error.\n *\n *\n * `params` is an Object of the form:\n * {\n *   file_path: String // Absolute path of file to be uploaded.\n * }\n *\n * @param  {Object}  params  options object (described above).\n * @param  {cb}      cb      callback of the form: function (err, bodyObj, resp)\n */\nTwitter.prototype.postMediaChunked = function (params, cb) {\n  var self = this;\n  try {\n    var fileUploader = new FileUploader(params, self);\n  } catch(err) {\n    cb(err);\n    return;\n  }\n  fileUploader.upload(cb);\n}\n\nTwitter.prototype._updateClockOffsetFromResponse = function (resp) {\n  var self = this;\n  if (resp && resp.headers && resp.headers.date &&\n      new Date(resp.headers.date).toString() !== 'Invalid Date'\n  ) {\n    var twitterTimeMs = new Date(resp.headers.date).getTime()\n    self._twitter_time_minus_local_time_ms = twitterTimeMs - Date.now();\n  }\n}\n\n/**\n * Builds and returns an options object ready to pass to `request()`\n * @param  {String}   method      \"GET\" or \"POST\"\n * @param  {String}   path        REST API resource uri (eg. \"statuses/destroy/:id\")\n * @param  {Object}   params      user's params object\n * @param  {Boolean}  isStreaming Flag indicating if it's a request to the Streaming API (different endpoint)\n * @returns {Undefined}\n *\n * Calls `callback` with Error, Object where Object is an options object ready to pass to `request()`.\n *\n * Returns error raised (if any) by `helpers.moveParamsIntoPath()`\n */\nTwitter.prototype._buildReqOpts = function (method, path, params, isStreaming, callback) {\n  var self = this\n  if (!params) {\n    params = {}\n  }\n  // clone `params` object so we can modify it without modifying the user's reference\n  var paramsClone = JSON.parse(JSON.stringify(params))\n  // convert any arrays in `paramsClone` to comma-seperated strings\n  var finalParams = this.normalizeParams(paramsClone)\n  delete finalParams.twit_options\n\n  // the options object passed to `request` used to perform the HTTP request\n  var reqOpts = {\n    headers: {\n      'Accept': '*/*',\n      'User-Agent': 'twit-client'\n    },\n    gzip: true,\n    encoding: null,\n  }\n\n  if (typeof self.config.timeout_ms !== 'undefined' && !isStreaming) {\n    reqOpts.timeout = self.config.timeout_ms;\n  }\n\n  if (typeof self.config.strictSSL !== 'undefined') {\n    reqOpts.strictSSL = self.config.strictSSL;\n  }\n  \n  // finalize the `path` value by building it using user-supplied params\n  // when json parameters should not be in the payload\n  if (JSONPAYLOAD_PATHS.indexOf(path) === -1) {\n    try {\n      path = helpers.moveParamsIntoPath(finalParams, path)\n    } catch (e) {\n      callback(e, null, null)\n      return\n    }\n  }\n\n  if (path.match(/^https?:\\/\\//i)) {\n    // This is a full url request\n    reqOpts.url = path\n  } else\n  if (isStreaming) {\n    // This is a Streaming API request.\n\n    var stream_endpoint_map = {\n      user: endpoints.USER_STREAM,\n      site: endpoints.SITE_STREAM\n    }\n    var endpoint = stream_endpoint_map[path] || endpoints.PUB_STREAM\n    reqOpts.url = endpoint + path + '.json'\n  } else {\n    // This is a REST API request.\n\n    if (path.indexOf('media/') !== -1) {\n      // For media/upload, use a different endpoint.\n      reqOpts.url = endpoints.MEDIA_UPLOAD + path + '.json';\n    } else {\n      reqOpts.url = endpoints.REST_ROOT + path + '.json';\n    }\n\n    if (FORMDATA_PATHS.indexOf(path) !== -1) {\n      reqOpts.headers['Content-type'] = 'multipart/form-data';\n      reqOpts.form = finalParams;\n       // set finalParams to empty object so we don't append a query string\n      // of the params\n      finalParams = {};\n    } else if (JSONPAYLOAD_PATHS.indexOf(path) !== -1) {\n      reqOpts.headers['Content-type'] = 'application/json';\n      reqOpts.json = true;\n      reqOpts.body = finalParams;\n      // as above, to avoid appending query string for body params\n      finalParams = {};\n    } else {\n      reqOpts.headers['Content-type'] = 'application/json';\n    }\n  }\n\n  if (isStreaming) {\n    reqOpts.form = finalParams\n  } else if (Object.keys(finalParams).length) {\n    // not all of the user's parameters were used to build the request path\n    // add them as a query string\n    var qs = helpers.makeQueryString(finalParams)\n    reqOpts.url += '?' + qs\n  }\n\n  if (!self.config.app_only_auth) {\n    // with user auth, we can just pass an oauth object to requests\n    // to have the request signed\n    var oauth_ts = Date.now() + self._twitter_time_minus_local_time_ms;\n\n    reqOpts.oauth = {\n      consumer_key: self.config.consumer_key,\n      consumer_secret: self.config.consumer_secret,\n      token: self.config.access_token,\n      token_secret: self.config.access_token_secret,\n      timestamp: Math.floor(oauth_ts/1000).toString(),\n    }\n\n    callback(null, reqOpts);\n    return;\n  } else {\n    // we're using app-only auth, so we need to ensure we have a bearer token\n    // Once we have a bearer token, add the Authorization header and return the fully qualified `reqOpts`.\n    self._getBearerToken(function (err, bearerToken) {\n      if (err) {\n        callback(err, null)\n        return\n      }\n\n      reqOpts.headers['Authorization'] = 'Bearer ' + bearerToken;\n      callback(null, reqOpts)\n      return\n    })\n  }\n}\n\n/**\n * Make HTTP request to Twitter REST API.\n * @param  {Object}   reqOpts     options object passed to `request()`\n * @param  {Object}   twitOptions\n * @param  {String}   method      \"GET\" or \"POST\"\n * @param  {Function} callback    user's callback\n * @return {Undefined}\n */\nTwitter.prototype._doRestApiRequest = function (reqOpts, twitOptions, method, callback) {\n  var request_method = request[method.toLowerCase()];\n  var req = request_method(reqOpts);\n\n  var body = '';\n  var response = null;\n\n  var onRequestComplete = function () {\n    if (body !== '') {\n      try {\n        body = JSON.parse(body)\n      } catch (jsonDecodeError) {\n        // there was no transport-level error, but a JSON object could not be decoded from the request body\n        // surface this to the caller\n        var err = helpers.makeTwitError('JSON decode error: Twitter HTTP response body was not valid JSON')\n        err.statusCode = response ? response.statusCode: null;\n        err.allErrors.concat({error: jsonDecodeError.toString()})\n        callback(err, body, response);\n        return\n      }\n    }\n\n    if (typeof body === 'object' && (body.error || body.errors)) {\n      // we got a Twitter API-level error response\n      // place the errors in the HTTP response body into the Error object and pass control to caller\n      var err = helpers.makeTwitError('Twitter API Error')\n      err.statusCode = response ? response.statusCode: null;\n      helpers.attachBodyInfoToError(err, body);\n      callback(err, body, response);\n      return\n    }\n\n    // success case - no errors in HTTP response body\n    callback(err, body, response)\n  }\n\n  req.on('response', function (res) {\n    response = res\n    // read data from `request` object which contains the decompressed HTTP response body,\n    // `response` is the unmodified http.IncomingMessage object which may contain compressed data\n    req.on('data', function (chunk) {\n      body += chunk.toString('utf8')\n    })\n    // we're done reading the response\n    req.on('end', function () {\n      onRequestComplete()\n    })\n  })\n\n  req.on('error', function (err) {\n    // transport-level error occurred - likely a socket error\n    if (twitOptions.retry &&\n        STATUS_CODES_TO_ABORT_ON.indexOf(err.statusCode) !== -1\n    ) {\n      // retry the request since retries were specified and we got a status code we should retry on\n      self.request(method, path, params, callback);\n      return;\n    } else {\n      // pass the transport-level error to the caller\n      err.statusCode = null\n      err.code = null\n      err.allErrors = [];\n      helpers.attachBodyInfoToError(err, body)\n      callback(err, body, response);\n      return;\n    }\n  })\n}\n\n/**\n * Creates/starts a connection object that stays connected to Twitter's servers\n * using Twitter's rules.\n *\n * @param  {String} path   Resource path to connect to (eg. \"statuses/sample\")\n * @param  {Object} params user's params object\n * @return {StreamingAPIConnection}        [description]\n */\nTwitter.prototype.stream = function (path, params) {\n  var self = this;\n  var twitOptions = (params && params.twit_options) || {};\n\n  var streamingConnection = new StreamingAPIConnection()\n  self._buildReqOpts('POST', path, params, true, function (err, reqOpts) {\n    if (err) {\n      // we can get an error if we fail to obtain a bearer token or construct reqOpts\n      // surface this on the streamingConnection instance (where a user may register their error handler)\n      streamingConnection.emit('error', err)\n      return\n    }\n    // set the properties required to start the connection\n    streamingConnection.reqOpts = reqOpts\n    streamingConnection.twitOptions = twitOptions\n\n    process.nextTick(function () {\n      streamingConnection.start()\n    })\n  })\n\n  return streamingConnection\n}\n\n/**\n * Gets bearer token from cached reference on `self`, or fetches a new one and sets it on `self`.\n *\n * @param  {Function} callback Function to invoke with (Error, bearerToken)\n * @return {Undefined}\n */\nTwitter.prototype._getBearerToken = function (callback) {\n  var self = this;\n  if (self._bearerToken) {\n    return callback(null, self._bearerToken)\n  }\n\n  helpers.getBearerToken(self.config.consumer_key, self.config.consumer_secret,\n  function (err, bearerToken) {\n    if (err) {\n      // return the fully-qualified Twit Error object to caller\n      callback(err, null);\n      return;\n    }\n    self._bearerToken = bearerToken;\n    callback(null, self._bearerToken);\n    return;\n  })\n}\n\nTwitter.prototype.normalizeParams = function (params) {\n  var normalized = params\n  if (params && typeof params === 'object') {\n    Object.keys(params).forEach(function (key) {\n      var value = params[key]\n      // replace any arrays in `params` with comma-separated string\n      if (Array.isArray(value))\n        normalized[key] = value.join(',')\n    })\n  } else if (!params) {\n    normalized = {}\n  }\n  return normalized\n}\n\nTwitter.prototype.setAuth = function (auth) {\n  var self = this\n  var configKeys = [\n    'consumer_key',\n    'consumer_secret',\n    'access_token',\n    'access_token_secret'\n  ];\n\n  // update config\n  configKeys.forEach(function (k) {\n    if (auth[k]) {\n      self.config[k] = auth[k]\n    }\n  })\n  this._validateConfigOrThrow(self.config);\n}\n\nTwitter.prototype.getAuth = function () {\n  return this.config\n}\n\n//\n// Check that the required auth credentials are present in `config`.\n// @param {Object}  config  Object containing credentials for REST API auth\n//\nTwitter.prototype._validateConfigOrThrow = function (config) {\n  //check config for proper format\n  if (typeof config !== 'object') {\n    throw new TypeError('config must be object, got ' + typeof config)\n  }\n\n  if (typeof config.timeout_ms !== 'undefined' && isNaN(Number(config.timeout_ms))) {\n    throw new TypeError('Twit config `timeout_ms` must be a Number. Got: ' + config.timeout_ms + '.');\n  }\n\n  if (typeof config.strictSSL !== 'undefined' && typeof config.strictSSL !== 'boolean') {\n    throw new TypeError('Twit config `strictSSL` must be a Boolean. Got: ' + config.strictSSL + '.');\n  }\n\n  if (config.app_only_auth) {\n    var auth_type = 'app-only auth'\n    var required_keys = required_for_app_auth\n  } else {\n    var auth_type = 'user auth'\n    var required_keys = required_for_user_auth\n  }\n\n  required_keys.forEach(function (req_key) {\n    if (!config[req_key]) {\n      var err_msg = util.format('Twit config must include `%s` when using %s.', req_key, auth_type)\n      throw new Error(err_msg)\n    }\n  })\n}\n\nmodule.exports = Twitter\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}